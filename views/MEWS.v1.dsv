<!DOCTYPE html><html ng-app="cds_app">
<head>
<title>{{def.concept.name}}</title>
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<link rel="stylesheet" type="text/css" href="wro/foundation.css"/>
<link rel="stylesheet" type="text/css" href="wro/date-picker.css"/>
<link rel="stylesheet" type="text/css" href="wro/angular.css"></link>
<script type="text/javascript" src="wro/angular.js"></script>
<link rel="text/javascript" type="text/css" href="wro/foundation.js"/>
<script type="text/javascript" src="wro/moment.js"></script>
<script type="text/javascript" src="wro/date-picker.js"></script>
<script type="text/javascript" src="wro/app_lib.js"></script>
<script id="decision-support-view" type="application/json">{
  "dsViewId": "MEWS.v1",
  "language": {
    "originalLanguage": {
      "terminologyId": {
        "name": "ISO_639-1",
        "value": "ISO_639-1"
      },
      "codeString": "en"
    }
  },
  "decisionSupportViewDefinitions": {
    "en": {
      "name": "MEWS",
      "description": "Modified Early Warning Score"
    },
    "se": {
      "name": "MEWS",
      "description": "Modified Early Warning Scale"
    }
  },
  "resourceDescription": {
    "originalAuthor": {
      "organisation": "Cambio Healthcare Systems",
      "name": "Oskar Nielsen",
      "date": "2016-07-29"
    },
    "otherContributors": [],
    "details": {
      "en": {
        "purpose": "To calculate a score based on categorising physiological readings and observations, as a simple method to support objective assessment of the degree of illness in an unwell patient.",
        "keywords": [
          "MEWS",
          "Modified early warning score"
        ],
        "use": "Use to calculate a composite score to support assessment of the degree of illness in an unwell patient.",
        "misuse": "Not to be used to record National Early Warning Score (NEWS). Use openEHR-EHR-OBSERVATION.news.v1 instead."
      },
      "se": {
        "purpose": "För att beräkna en summa baserad på kategorisering av fysiologiska avläsningar och observationer, som en enkel metod för att stödja objektiv bedömning av graden av sjukdom hos en sjuk patient.",
        "keywords": [
          "MEWS",
          "Modified early warning score"
        ],
        "use": "Används för att räkna ut en sammansatt poäng för att stödja bedömningen av graden av sjukdom hos en sjuk patient.",
        "misuse": "Får ej användas för att beräkna National Early Warning Score (NEWS)."
      }
    },
    "otherDetails": {
      "references": "Modified Early Warning Scale, MEWS. Capio S:t Görans Sjukhus. Version 4.0. 2011-09-05"
    }
  },
  "alertGuideIds": [],
  "executionGuideIds": [
    "MEWS.v1"
  ],
  "alertBindings": {},
  "termDefinitions": {
    "en": {
      "id": "en",
      "terms": {
          "vt0001": {
            "id": "vt0001",
            "text": "EHR Data"
            }
      }
    },
    "sv": {
      "id": "sv",
        "terms": {
          "vt0001": {
            "id": "vt0001",
            "text": "Journaldata"
          }
        }
    }
  }
}</script>
</head>
<body ng-controller="cds_controller">
<#assign ehr_data = "def.terms['vt0001']">
<#assign app_help_tag = "def.guides['MEWS.v1'].concept">
<#assign pulse_entry_ehr_data = "data.ehr['openEHR-EHR-OBSERVATION.pulse.v1']">
<#assign pulse_entry_def = "def.entries['openEHR-EHR-OBSERVATION.pulse.v1']">
<#assign rate_def = pulse_entry_def + ".elements['/data{at0002}/events{at0003}/data{at0001}/items{at0004}']">
<#assign event_time_def = pulse_entry_def + ".elements['/data/events/time']">
<#assign rate_ehr_data = pulse_entry_ehr_data + "[0].elements['/data{at0002}/events{at0003}/data{at0001}/items{at0004}']">
<#assign event_time_ehr_data = pulse_entry_ehr_data + "[0].elements['/data/events/time']">
<#assign blood_pressure_entry_ehr_data = "data.ehr['openEHR-EHR-OBSERVATION.blood_pressure.v1']">
<#assign blood_pressure_entry_def = "def.entries['openEHR-EHR-OBSERVATION.blood_pressure.v1']">
<#assign systolic_def = blood_pressure_entry_def + ".elements['/data{at0001}/events{at0006}/data{at0003}/items{at0004}']">
<#assign event_time1_def = blood_pressure_entry_def + ".elements['/data/events/time']">
<#assign systolic_ehr_data = blood_pressure_entry_ehr_data + "[0].elements['/data{at0001}/events{at0006}/data{at0003}/items{at0004}']">
<#assign event_time1_ehr_data = blood_pressure_entry_ehr_data + "[0].elements['/data/events/time']">
<#assign respirations_entry_ehr_data = "data.ehr['openEHR-EHR-OBSERVATION.respiration.v1']">
<#assign respirations_entry_def = "def.entries['openEHR-EHR-OBSERVATION.respiration.v1']">
<#assign respiration_rate_def = respirations_entry_def + ".elements['/data{at0001}/events{at0002}/data{at0003}/items{at0004}']">
<#assign event_time2_def = respirations_entry_def + ".elements['/data/events/time']">
<#assign respiration_rate_ehr_data = respirations_entry_ehr_data + "[0].elements['/data{at0001}/events{at0002}/data{at0003}/items{at0004}']">
<#assign event_time2_ehr_data = respirations_entry_ehr_data + "[0].elements['/data/events/time']">
<#assign avpu_entry_ehr_data = "data.ehr['openEHR-EHR-OBSERVATION.avpu.v1']">
<#assign avpu_entry_def = "def.entries['openEHR-EHR-OBSERVATION.avpu.v1']">
<#assign avpu_observation_def = avpu_entry_def + ".elements['/data{at0001}/events{at0002}/data{at0003}/items{at0004}']">
<#assign new_confusion_def = avpu_entry_def + ".elements['/data{at0001}/events{at0002}/data{at0003}/items{at0009}']">
<#assign event_time3_def = avpu_entry_def + ".elements['/data/events/time']">
<#assign avpu_observation_ehr_data = avpu_entry_ehr_data + "[0].elements['/data{at0001}/events{at0002}/data{at0003}/items{at0004}']">
<#assign new_confusion_ehr_data = avpu_entry_ehr_data + "[0].elements['/data{at0001}/events{at0002}/data{at0003}/items{at0009}']">
<#assign event_time3_ehr_data = avpu_entry_ehr_data + "[0].elements['/data/events/time']">
<#assign modified_early_warning_score__mews__entry_ehr_data = "data.ehr['openEHR-EHR-OBSERVATION.mews.v1']">
<#assign modified_early_warning_score__mews__entry_cds_data = "data.cds['openEHR-EHR-OBSERVATION.mews.v1']">
<#assign modified_early_warning_score__mews__entry_def = "def.entries['openEHR-EHR-OBSERVATION.mews.v1']">
<#assign respiratory_rate_def = modified_early_warning_score__mews__entry_def + ".elements['/data{at0001}/events{at0002}/data{at0003}/items{at0004}']">
<#assign total_score_def = modified_early_warning_score__mews__entry_def + ".elements['/data{at0001}/events{at0002}/data{at0003}/items{at0032}']">
<#assign urine_output_def = modified_early_warning_score__mews__entry_def + ".elements['/data{at0001}/events{at0002}/data{at0003}/items{at0028}']">
<#assign heart_rate_def = modified_early_warning_score__mews__entry_def + ".elements['/data{at0001}/events{at0002}/data{at0003}/items{at0009}']">
<#assign level_of_consciousness_def = modified_early_warning_score__mews__entry_def + ".elements['/data{at0001}/events{at0002}/data{at0003}/items{at0023}']">
<#assign event_time4_def = modified_early_warning_score__mews__entry_def + ".elements['/data/events/time']">
<#assign systolic_blood_pressure_def = modified_early_warning_score__mews__entry_def + ".elements['/data{at0001}/events{at0002}/data{at0003}/items{at0014}']">
<#assign temperature_def = modified_early_warning_score__mews__entry_def + ".elements['/data{at0001}/events{at0002}/data{at0003}/items{at0019}']">
<#assign respiratory_rate_ehr_data = modified_early_warning_score__mews__entry_ehr_data + "[0].elements['/data{at0001}/events{at0002}/data{at0003}/items{at0004}']">
<#assign total_score_ehr_data = modified_early_warning_score__mews__entry_ehr_data + "[0].elements['/data{at0001}/events{at0002}/data{at0003}/items{at0032}']">
<#assign urine_output_ehr_data = modified_early_warning_score__mews__entry_ehr_data + "[0].elements['/data{at0001}/events{at0002}/data{at0003}/items{at0028}']">
<#assign heart_rate_ehr_data = modified_early_warning_score__mews__entry_ehr_data + "[0].elements['/data{at0001}/events{at0002}/data{at0003}/items{at0009}']">
<#assign level_of_consciousness_ehr_data = modified_early_warning_score__mews__entry_ehr_data + "[0].elements['/data{at0001}/events{at0002}/data{at0003}/items{at0023}']">
<#assign event_time4_ehr_data = modified_early_warning_score__mews__entry_ehr_data + "[0].elements['/data/events/time']">
<#assign systolic_blood_pressure_ehr_data = modified_early_warning_score__mews__entry_ehr_data + "[0].elements['/data{at0001}/events{at0002}/data{at0003}/items{at0014}']">
<#assign temperature_ehr_data = modified_early_warning_score__mews__entry_ehr_data + "[0].elements['/data{at0001}/events{at0002}/data{at0003}/items{at0019}']">
<#assign respiratory_rate_cds_data = modified_early_warning_score__mews__entry_cds_data + "[0].elements['/data{at0001}/events{at0002}/data{at0003}/items{at0004}']">
<#assign total_score_cds_data = modified_early_warning_score__mews__entry_cds_data + "[0].elements['/data{at0001}/events{at0002}/data{at0003}/items{at0032}']">
<#assign urine_output_cds_data = modified_early_warning_score__mews__entry_cds_data + "[0].elements['/data{at0001}/events{at0002}/data{at0003}/items{at0028}']">
<#assign heart_rate_cds_data = modified_early_warning_score__mews__entry_cds_data + "[0].elements['/data{at0001}/events{at0002}/data{at0003}/items{at0009}']">
<#assign level_of_consciousness_cds_data = modified_early_warning_score__mews__entry_cds_data + "[0].elements['/data{at0001}/events{at0002}/data{at0003}/items{at0023}']">
<#assign event_time4_cds_data = modified_early_warning_score__mews__entry_cds_data + "[0].elements['/data/events/time']">
<#assign systolic_blood_pressure_cds_data = modified_early_warning_score__mews__entry_cds_data + "[0].elements['/data{at0001}/events{at0002}/data{at0003}/items{at0014}']">
<#assign temperature_cds_data = modified_early_warning_score__mews__entry_cds_data + "[0].elements['/data{at0001}/events{at0002}/data{at0003}/items{at0019}']">
<#assign urine_output_entry_ehr_data = "data.ehr['openEHR-EHR-OBSERVATION.urine_output.v1']">
<#assign urine_output_entry_def = "def.entries['openEHR-EHR-OBSERVATION.urine_output.v1']">
<#assign total_urine_output_24_hr_def = urine_output_entry_def + ".elements['/data{at0001}/events{at0002}/data{at0003}/items{at0005}']">
<#assign event_time5_def = urine_output_entry_def + ".elements['/data/events/time']">
<#assign total_urine_output_24_hr_ehr_data = urine_output_entry_ehr_data + "[0].elements['/data{at0001}/events{at0002}/data{at0003}/items{at0005}']">
<#assign event_time5_ehr_data = urine_output_entry_ehr_data + "[0].elements['/data/events/time']">
<#assign body_temperature_entry_ehr_data = "data.ehr['openEHR-EHR-OBSERVATION.body_temperature.v1']">
<#assign body_temperature_entry_def = "def.entries['openEHR-EHR-OBSERVATION.body_temperature.v1']">
<#assign temperature1_def = body_temperature_entry_def + ".elements['/data{at0002}/events{at0003}/data{at0001}/items{at0004}']">
<#assign event_time6_def = body_temperature_entry_def + ".elements['/data/events/time']">
<#assign temperature1_ehr_data = body_temperature_entry_ehr_data + "[0].elements['/data{at0002}/events{at0003}/data{at0001}/items{at0004}']">
<#assign event_time6_ehr_data = body_temperature_entry_ehr_data + "[0].elements['/data/events/time']">
<script>
angular.module('cds_app').controller('MEWS_Ctrl', function($scope, $window){
  $scope.$on('json_loaded', function(){
    $scope.${event_time_ehr_data}.value.value = $window.getCurrentDate();
    $scope.${event_time1_ehr_data}.value.value = $window.getCurrentDate();
    $scope.${event_time2_ehr_data}.value.value = $window.getCurrentDate();
    $scope.${event_time3_ehr_data}.value.value = $window.getCurrentDate();
    $scope.${event_time4_ehr_data}.value.value = $window.getCurrentDate();
    $scope.${event_time5_ehr_data}.value.value = $window.getCurrentDate();
    $scope.${event_time6_ehr_data}.value.value = $window.getCurrentDate();
    $scope.${systolic_ehr_data}.value.units = $scope.${systolic_def}.units[0];
    $scope.${rate_ehr_data}.value.units = $scope.${rate_def}.units[0];
    $scope.${respiration_rate_ehr_data}.value.units = $scope.${respiration_rate_def}.units[0];
    $scope.${total_urine_output_24_hr_ehr_data}.value.units = $scope.${total_urine_output_24_hr_def}.units[0];
    $scope.${temperature1_ehr_data}.value.units = $scope.${temperature1_def}.units[0];
    $scope.${new_confusion_ehr_data}.value.selection = $scope.findItem($scope.${new_confusion_def}.selections, 'at0010').itemId;
    $scope.${avpu_observation_ehr_data}.value.selection = $scope.findItem($scope.${avpu_observation_def}.selections, 'at0005').itemId;
  });
  $scope.findItem = function (selections, atCode) {
    var itemVal, itemId;
    var regex = new RegExp(atCode + ".*");
    angular.forEach(selections, function(value, key) {
      if (regex.test(key)) {
        itemVal = value;
        itemId = key;
      }
    });
    return {result: itemVal, itemId: itemId};;
  };
  $scope.filterItem = function (selection, split) {
    var myRegexp = split ? /(.*) or/ : /or (.*)/; // Split before or after 'or' in phrase
    if (myRegexp.test(selection)) {
      var match = myRegexp.exec(selection);
      return match[1];
    }
    return selection;
  };
  $scope.question = {};
  $scope.select = function (element, param, itemId, questionId) {
    element.value.selection = param;
    $scope.execute();
    $scope.question[questionId] = {item: parseInt(itemId)};
  };
  var ehr_accordion = document.getElementById("ehr_accordion");
  var ehr_panel = document.getElementById("ehr_panel");
  ehr_accordion.onclick = function() {
      ehr_accordion.classList.toggle("active");
      ehr_panel.classList.toggle("show");
  }
});
</script>
<div ng-show="ready" ng-controller="MEWS_Ctrl">
<div class="content">
<div class="header">
  <h1>{{def.concept.name}}</h1>
  <h2>{{def.concept.description}}</h2>
  <div class="help-tip">
	<p>{{${app_help_tag}.description}}</p>
  </div>
</div>
<div class="card">
  <h5 class="accordion" id="ehr_accordion"> {{${ehr_data}.text}}</h5>
<div class="row">
  <div class="panel" id="ehr_panel">
    <div class="medium-6 column">
      <div class="row collapse" title="{{${respiration_rate_def}.description}}">
          <div class="medium-5 columns">
            <label>{{${respiration_rate_def}.name}}</label>
          </div>
          <div class="medium-5 columns">
            <input ng-model="${respiration_rate_ehr_data}.value.magnitude" type="number" step='any' min="0" ng-change="execute()" ng-model-options="{ updateOn: 'default blur', debounce: { default: 500, blur: 0 } }"></input>
          </div>
          <div class="medium-2 columns">
            <select ng-model="${respiration_rate_ehr_data}.value.units" ng-options="unit for unit in ${respiration_rate_def}.units" ng-change="execute()" disabled></select>
          </div>
      </div>
      <div class="row collapse" title="{{${rate_def}.description}}">
          <div class="medium-5 columns">
            <label>{{${rate_def}.name}}</label>
          </div>
          <div class="medium-5 columns">
            <input ng-model="${rate_ehr_data}.value.magnitude" type="number" step='any' min="0" ng-change="execute()" ng-model-options="{ updateOn: 'default blur', debounce: { default: 500, blur: 0 } }"></input>
          </div>
          <div class="medium-2 columns">
            <select ng-model="${rate_ehr_data}.value.units" ng-options="unit for unit in ${rate_def}.units" ng-change="execute()" disabled></select>
          </div>
      </div>
      <div class="row collapse" title="{{${urine_output_def}.description}}">
          <div class="medium-5 columns">
            <label>{{${urine_output_def}.name}}</label>
          </div>
          <div class="medium-5 columns">
            <input ng-model="${total_urine_output_24_hr_ehr_data}.value.magnitude" type="number" step='any' min="0" ng-change="execute()" ng-model-options="{ updateOn: 'default blur', debounce: { default: 500, blur: 0 } }"></input>
          </div>
          <div class="medium-2 columns">
            <select ng-model="${total_urine_output_24_hr_ehr_data}.value.units" ng-options="unit for unit in ${total_urine_output_24_hr_def}.units" ng-change="execute()" disabled></select>
          </div>
      </div>
    </div>
    <div class="medium-6 column">
      <div class="row collapse" title="{{${systolic_def}.description}}">
          <div class="medium-5 columns">
            <label>{{${systolic_def}.name}}</label>
          </div>
          <div class="medium-5 columns">
            <input ng-model="${systolic_ehr_data}.value.magnitude" type="number" step='any' min="0" ng-change="execute()" ng-model-options="{ updateOn: 'default blur', debounce: { default: 500, blur: 0 } }"></input>
          </div>
          <div class="medium-2 columns">
            <select ng-model="${systolic_ehr_data}.value.units" ng-options="unit for unit in ${systolic_def}.units" ng-change="execute()" disabled></select>
          </div>
      </div>
      <div class="row collapse" title="{{${systolic_def}.description}}">
          <div class="medium-5 columns">
            <label>{{${temperature_def}.name}}</label>
          </div>
          <div class="medium-5 columns">
            <input ng-model="${temperature1_ehr_data}.value.magnitude" type="number" step='any' min="0" ng-change="execute()" ng-model-options="{ updateOn: 'default blur', debounce: { default: 500, blur: 0 } }"></input>
          </div>
          <div class="medium-2 columns">
            <select ng-model="${temperature1_ehr_data}.value.units" ng-options="unit for unit in ${temperature1_def}.units" ng-change="execute()" disabled></select>
          </div>
      </div>
      <div class="row collapse" title="{{${level_of_consciousness_def}.description}}">
          <div class="medium-5 columns">
            <label>{{${level_of_consciousness_def}.name}}</label>
          </div>
          <div class="medium-7 columns">
            <select ng-model="${avpu_observation_ehr_data}.value.selection" ng-options="key as desc for (key, desc) in ${avpu_observation_def}.selections" ng-change="execute()" ng-model-options="{ updateOn: 'default blur', debounce: { default: 500, blur: 0 } }"></select>
          </div>
      </div>
      <div class="row collapse" title="{{${new_confusion_def}.description}}">
          <div class="medium-5 columns">
            <label class="fix">{{${new_confusion_def}.name}}</label>
          </div>
          <div class="medium-7 columns">
            <select class="fix" ng-model="${new_confusion_ehr_data}.value.selection" ng-options="key as desc for (key, desc) in ${new_confusion_def}.selections"  ng-change="execute()" ng-model-options="{ updateOn: 'default blur', debounce: { default: 500, blur: 0 } }"></select>
          </div>
      </div>
    </div>
  </div>
</div>
</div>
<div class="card">
  <table id="combo-chart">
    <div class="combo-input">
    <tr class="hrow centered">
      <th><b>Score</b></th>
      <td ng-repeat="i in [3,2,1]">{{i}}</td>
      <td ng-repeat="i in [0,1,2,3]">{{i}}</td>
    </tr>
    <tr class="centered">
      <th>{{${respiration_rate_def}.name}}<small>, /min</small></th>
      <td></td>
      <td ng-click="select(${respiratory_rate_ehr_data}, findItem(${respiratory_rate_def}.selections, 'at0007').itemId, 5, 2)" ng-class="{'active' : question[2].item === 5}">{{filterItem(findItem(${respiratory_rate_def}.selections, 'at0007').result, 'split first part')}}</td>
      <td></td>
      <td ng-repeat="(key, desc) in ${respiratory_rate_def}.selections" ng-click="select(${respiratory_rate_ehr_data}, key, $index, 2)" ng-class="{'active' : question[2].item === $index}">{{filterItem(desc)}}</td>
    </tr>
    <tr class="centered">
      <th>{{${heart_rate_def}.name}}</th>
      <td></td>
      <td ng-repeat="i in [12,11]" ng-click="select(${heart_rate_ehr_data}, findItem(${heart_rate_def}.selections, 'at00'+i).itemId, i, 3)" ng-class="{'active' : question[3].item === i}">{{filterItem(findItem(${heart_rate_def}.selections, 'at00'+i).result, 'split first part')}}</td>
      <td ng-repeat="(key, desc) in ${heart_rate_def}.selections" ng-click="select(${heart_rate_ehr_data}, key, $index, 3)" ng-class="{'active' : question[3].item === $index}">{{filterItem(desc)}}</td>
    </tr>
    <tr class="centered">
      <th>{{${systolic_blood_pressure_def}.name}}</th>
      <td ng-click="select(${systolic_blood_pressure_ehr_data}, findItem(${systolic_blood_pressure_def}.selections, 'at0018').itemId, 1, 4)" ng-class="{'active' : question[4].item === 1}">{{filterItem(findItem(${systolic_blood_pressure_def}.selections, 'at0018').result)}}</td>
      <td ng-click="select(${systolic_blood_pressure_ehr_data}, findItem(${systolic_blood_pressure_def}.selections, 'at0017').itemId, 2, 4)" ng-class="{'active' : question[4].item === 2}">{{filterItem(findItem(${systolic_blood_pressure_def}.selections, 'at0017').result, 'split')}}</td>
      <td ng-click="select(${systolic_blood_pressure_ehr_data}, findItem(${systolic_blood_pressure_def}.selections, 'at0016').itemId, 3, 4)" ng-class="{'active' : question[4].item === 3}">{{filterItem(findItem(${systolic_blood_pressure_def}.selections, 'at0016').result)}}</td>
      <td ng-click="select(${systolic_blood_pressure_ehr_data}, findItem(${systolic_blood_pressure_def}.selections, 'at0015').itemId, 4, 4)" ng-class="{'active' : question[4].item === 4}">{{filterItem(findItem(${systolic_blood_pressure_def}.selections, 'at0015').result)}}</td>
      <td></td>
      <td ng-click="select(${systolic_blood_pressure_ehr_data}, findItem(${systolic_blood_pressure_def}.selections, 'at0017').itemId, 6, 4)" ng-class="{'active' : question[4].item === 6}">{{filterItem(findItem(${systolic_blood_pressure_def}.selections, 'at0017').result)}}</td>
      <td></td>
    </tr>
    <tr class="centered">
      <th>{{${temperature_def}.name}}</th>
      <td></td>
      <td ng-repeat="i in [22,21]" ng-click="select(${temperature_ehr_data}, findItem(${temperature_def}.selections, 'at00'+i).itemId, i, 5)" ng-class="{'active' : question[5].item === i}">{{filterItem(findItem(${temperature_def}.selections, 'at00'+i).result, 'split first part')}}</td>
      <td ng-repeat="(key, desc) in ${temperature_def}.selections" ng-click="select(${temperature_ehr_data}, key, $index, 5)" ng-class="{'active' : question[5].item === $index}">{{filterItem(desc)}}</td>
      <td></td>
    </tr>
    <tr class="centered">
      <th>{{${level_of_consciousness_def}.name}}</th>
      <td ng-repeat="i in [1,2]"></td>
      <td ng-click="select(${level_of_consciousness_ehr_data}, findItem(${level_of_consciousness_def}.selections, 'at0025').itemId, 4, 1)" ng-class="{'active' : question[1].item === 4}">{{filterItem(findItem(${level_of_consciousness_def}.selections, 'at0025').result, 'split first part')}}</td>
      <td ng-repeat="(key, desc) in ${level_of_consciousness_def}.selections" ng-click="select(${level_of_consciousness_ehr_data}, key, $index, 1)" ng-class="{'active' : question[1].item === $index}">{{filterItem(desc)}}</td>
    </tr>
    <tr class="centered">
      <th>{{${urine_output_def}.name}}</th>
      <td ng-click="select(${urine_output_ehr_data}, findItem(${urine_output_def}.selections, 'at0033').itemId, 1, 6)" ng-class="{'active' : question[6].item === 1}">{{filterItem(findItem(${urine_output_def}.selections, 'at0033').result)}}</td>
      <td ng-click="select(${urine_output_ehr_data}, findItem(${urine_output_def}.selections, 'at0031').itemId, 2, 6)" ng-class="{'active' : question[6].item === 2}">{{filterItem(findItem(${urine_output_def}.selections, 'at0031').result)}}</td>
      <td ng-click="select(${urine_output_ehr_data}, findItem(${urine_output_def}.selections, 'at0030').itemId, 3, 6)" ng-class="{'active' : question[6].item === 3}">{{filterItem(findItem(${urine_output_def}.selections, 'at0030').result, 'split')}}</td>
      <td ng-click="select(${urine_output_ehr_data}, findItem(${urine_output_def}.selections, 'at0029').itemId, 4, 6)" ng-class="{'active' : question[6].item === 4}">{{filterItem(findItem(${urine_output_def}.selections, 'at0029').result)}}</td>
      <td ng-click="select(${urine_output_ehr_data}, findItem(${urine_output_def}.selections, 'at0030').itemId, 3, 6)" ng-class="{'active' : question[6].item === 3}">{{filterItem(findItem(${urine_output_def}.selections, 'at0030').result)}}</td>
      <td ng-repeat="i in [1,2]"></td>
    </tr>
    </div>
    <tr class="centered">
      <th><h4>{{${total_score_def}.name}}:</h4></th>
      <th><h4>{{${total_score_cds_data}.value.magnitude}}</h4></th>
    </tr>
  </table>
</div>
</div>
</div>
<style>
  html, body {
    height: 100%;
  }
  body {
    font-family: sans-serif;
    font-weight: 300;
    color: #333;
    background: #ecf0f9;
    padding: 1em;
    -webkit-font-smoothing: antialiased;
  }
  h1 {
    font-weight: 600;
    text-align: center;
  }
  h2 {
    text-align: center;
    font-weight: 300;
    font-size: 22px;
    font-style: italic;
  }
  h3 {
    font-weight: 600;
    font-size: 18px;
  }
  .header {
    margin-bottom: 2em;
  }
  .centered {
    text-align: center;
  }
  .card {
    background-color: #fdfdfd;
    box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);
    margin: 10px auto 10px auto;
    padding: 1em;
    width: 90%;
    overflow: hidden;
  }
  table {
    width: 100%;
    border-style: none;
    background: inherit;
    margin: 0 auto 0 auto;
  }
  table#combo-chart {
    table-layout: fixed;
    border-collapse: separate;
    border-spacing: 0 0.5em;
  }
  th, td {
    background: #fdfdfd;
    font-weight: 400;
    padding: 0.5em;
    overflow: hidden;
  }
  td {
    width: 12%;
    max-width: 14%;
  }
  tr.centered td {
    text-align: center;
    font: 12px/24px;
  }
  th {
    width: 15%;
  }
  tr.hrow td {
    opacity: 0.5;
  }
  td:nth-child(4n+3) {
    background-color:  #f0ad4e;
  }
  td:nth-child(2n+4){
    background-color: #ffff7f;
  }
  td:nth-child(6n+2){
    background-color: #d9534f;
  }
  td:nth-child(5){
    background-color: #5cb85c;
  }
  tr.centered td:hover, tr.centered .active {
    background-color: #42a5f5;
    cursor: pointer;
  }
  .content {
    padding-bottom: 1em;
  }
  .fix {
    margin: 15px 0 10px 0;
  }
  .help-tip{
      position: absolute;
      top: 18px;
      right: 18px;
      text-align: center;
      background-color: #BCDBEA;
      border-radius: 50%;
      width: 24px;
      height: 24px;
      font-size: 14px;
      line-height: 26px;
      cursor: default;
  }
  .help-tip:before{
      content:'?';
      font-weight: bold;
      color:#fff;
  }
  .help-tip:hover p{
      display:block;
      transform-origin: 100% 0%;
      -webkit-animation: fadeIn 0.3s ease-in-out;
      animation: fadeIn 0.3s ease-in-out;
  }
  .help-tip p{	/* The tooltip */
      display: none;
      text-align: left;
      background-color: #1E2021;
      padding: 20px;
      width: 300px;
      position: absolute;
      border-radius: 3px;
      box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.2);
      right: -4px;
      color: #FFF;
      font-size: 13px;
      line-height: 1.4;
      z-index: 9999;
  }
  .help-tip p:before{ /* The pointer of the tooltip */
      position: absolute;
      content: '';
      width:0;
      height: 0;
      border:6px solid transparent;
      border-bottom-color:#1E2021;
      right:10px;
      top:-12px;
  }
  .help-tip p:after{ /* Prevents the tooltip from being hidden */
      width:100%;
      height:40px;
      content:'';
      position: absolute;
      top:-40px;
      left:0;
  }
  /* CSS animation */
  @-webkit-keyframes fadeIn {
      0% { 
          opacity:0; 
          transform: scale(0.6);
      }

      100% {
          opacity:100%;
          transform: scale(1);
      }
  }
  @keyframes fadeIn {
      0% { opacity:0; }
      100% { opacity:100%; }
  }
  .accordion {
    cursor: pointer;
    border: none;
  }
  .accordion:after {
    border: none;
    content: '\02795';
    font-size: 20px;
    color: #777;
    float: left;
    margin-right: 5px;
  }
  .accordion.active:after {
    content: "\2796";
    border: none;
  }
  .panel {
    border:none;
    overflow: hidden;
    transition: 0.6s ease-in-out;
    display: none;
    visibility: hidden;
  }
  .panel.show {
    background-color: inherit;
    display: block;
    border: none;
    visibility: visible;
    height: auto;
    margin: 0 auto -30px auto;
  }
  #card1 {
    border: none;
  }
</style>
</body>
</html>